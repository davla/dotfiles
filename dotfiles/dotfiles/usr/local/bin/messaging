#!/usr/bin/env python3

"""Spawn applications in a tabbed container in the scratchpad and mark currently
focused window.

The application windows are loosely matched by "app_id" in sway and "instance" in i3.

The applications are initially moved to a throwaway workspace.

Usage:
    messaging --mark <mark> --workspace <workspace> <app>...
    messaging --help

Options:
    --mark <mark>, -M MARK                  The mark to be used for the last
                                            used window.
    --workspace <workspace>, -W WORKSPACE   The throaway workspace the windows
                                            are placed into.
    --help, -H                              Show this help text.
"""

import asyncio
import os
import shutil
from subprocess import DEVNULL

from docopt import docopt
from i3ipc import Event
from i3ipc.aio import Connection


async def ConnectionEvents(self, *event_names):
    """Yield selected events from this i3 connection."""
    queue = asyncio.Queue()
    for event_name in event_names:
        self.on(event_name, lambda _, event: queue.put_nowait(event))
    while True:
        yield await queue.get()


Connection.events = ConnectionEvents


class MessagingApp:
    """
    A messaging application.

    Attributes:
        window_criterion (str): The criterion that identifies the windows belonging to
                                the messaging application.
    """

    window_match_prop = "app_id" if "WAYLAND_DISPLAY" in os.environ else "instance"

    def __init__(self, bin_name):
        self.name = bin_name
        self.window_criterion = f'{self.window_match_prop}=".*{self.name}.*"'

    def __hash__(self):
        return hash(self.name)

    def is_app_window(self, window):
        """Return whether a window belongs to this messaging application."""
        return self.name in getattr(window, self.window_match_prop)

    def spawn(self):
        """Start the messaging application as a subprocesses."""
        executable = shutil.which(self.name)
        if executable is None:
            raise ValueError(f"Can't find executable for {self.name}")

        return asyncio.create_subprocess_exec(
            executable, stdin=DEVNULL, stdout=DEVNULL, stderr=DEVNULL
        )


class AppSet:
    """A remove-only set of messaging applications."""

    def __init__(self, apps):
        self.apps = set(apps)

    def __bool__(self):
        """Return whether there are any messaging applications left."""
        return bool(self.apps)

    def discard_by_window(self, window):
        """Remove the application matching the given window, if any."""
        for app in self.apps:
            if app.is_app_window(window):
                self.apps.discard(app)
                return

    def find_by_window(self, window):
        """Return the application matching the given window."""
        return next(app for app in self.apps if app.is_app_window(window))

    def has_app_by_window(self, window):
        """Whether there is any application matching the given window."""
        return any(app.is_app_window(window) for app in self.apps)


def add_mark(i3, criterion, mark):
    """Add a mark to an i3 container identified by a criterion."""
    return i3.command(f"[{criterion}] mark --add {mark}")


async def make_messaging_container(i3, workspace, mark, apps):
    """Create i3 container for messaging applications."""
    first_app_criterion = apps[0].window_criterion
    await move_apps_to_tmp_workspace(i3, workspace, apps)
    await wait_for_app_titles(i3, apps)
    await make_scratchpad(i3, first_app_criterion)
    await add_mark(i3, first_app_criterion, mark)


async def make_scratchpad(i3, criterion):
    """Send the messaging contaner to the i3 scratchpad."""
    current_workspace = (await i3.get_tree()).find_focused().workspace()
    await i3.command(
        f"""[{criterion}] focus parent; move scratchpad
            workspace {current_workspace.name}
            [{criterion}] scratchpad show, move position center"""
    )


async def mark_on_focus(i3, mark, apps):
    """Add a mark to the last focused messaging window."""
    remaining_apps = AppSet(apps)
    window_events = (
        event
        async for event in i3.events(Event.WINDOW_FOCUS, Event.WINDOW_CLOSE)
        if remaining_apps.has_app_by_window(event.container)
    )

    async for event in window_events:
        if event.change == "close":
            remaining_apps.discard_by_window(event.container)
        elif event.change == "focus":
            app = remaining_apps.find_by_window(event.container)
            await add_mark(i3, app.window_criterion, mark)

        if not remaining_apps:
            return


def move_apps_to_tmp_workspace(i3, workspace, apps):
    """Send the application windows to a throwaway workspace."""
    return i3.command(
        "\n".join(f'assign [{app.window_criterion}] "{workspace}"' for app in apps)
    )


def parse_cli_args():
    """Parse command-line arguments."""
    args = docopt(__doc__)
    return args["<app>"], args["--mark"], args["--workspace"]


async def wait_for_app_titles(i3, apps):
    """Wait for applications to generate a "window" i3 event with change == "title"."""
    events = i3.events(Event.WINDOW_TITLE)
    remaining_apps = AppSet(apps)
    while remaining_apps:
        event = await anext(events)
        remaining_apps.discard_by_window(event.container)


async def main():
    app_names, mark, workspace = parse_cli_args()

    apps = list(map(MessagingApp, app_names))
    await asyncio.gather(*map(MessagingApp.spawn, apps))

    i3 = await Connection().connect()
    await make_messaging_container(i3, mark, workspace, apps)
    await mark_on_focus(i3, mark, apps)


if __name__ == "__main__":
    asyncio.run(main())
