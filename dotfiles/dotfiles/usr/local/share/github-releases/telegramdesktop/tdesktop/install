#!/usr/bin/env sh

# This script installs Telegram desktop to a system location. It is meant to be
# used via the gh-release command.
#
# Arguments:
#   - $1: The GitHub repository name the software is installed from
#   - STDIN: The GitHub release JSON metadata
#
# {{@@ header() @@}}

set -e

#######################################
# Libraries includes
#######################################

# . "{{@@ gh_release_path @@}}"
. /usr/local/lib/sh/gh-release.sh

########################################
# Variables
########################################

INSTALL_DIR='/usr/local/bin'
EXEC_PATH="$INSTALL_DIR/telegram-desktop"

########################################
# Input processing
########################################

GITHUB_REPO="$1"

########################################
# Main
########################################

TMP_SOURCE_DIR="$(mktemp --tmpdir --directory 'XXX-telegramdesktop-src')"
TMP_FILE="$(mktemp --tmpdir 'XXX-telegramdesktop-urls')"
# shellcheck disable=SC2064
trap "rm --force --recursive $TMP_FILE $TMP_SOURCE_DIR" EXIT

log_debug 'Locate Telegram desktop artifacts...'
jq --raw-output '[
    (.assets[] | select(.label | startswith("Linux")).browser_download_url),
    .tarball_url
] | join(" ")' > "$TMP_FILE"
read -r BIN_ARCHIVE_URL SOURCE_ARCHIVE_URL < "$TMP_FILE"

log_debug 'Download and install Telegram desktop binaries...'
{
    wget --quiet --output-document - "$BIN_ARCHIVE_URL" \
        || wget_error "Failed to download binaries for Telegram desktop"
} > "$TMP_FILE"
tar --extract --xz --strip-components 1 --to-stdout --file "$TMP_FILE" \
    'Telegram' > "$EXEC_PATH"

log_debug "Set executable permissions to $EXEC_PATH..."
chmod +x "$EXEC_PATH"

log_debug "Alias telegram-desktop to telegram..."
ln --symbolic --force "$EXEC_PATH" "$INSTALL_DIR/telegram"

log_debug 'Download Telegram desktop sources...'
{
    wget --quiet --output-document - "$SOURCE_ARCHIVE_URL" \
        || wget_error "Failed to download binaries for Telegram desktop"
} > "$TMP_FILE"
tar --extract --gz --strip-components 1 --directory "$TMP_SOURCE_DIR" \
    --file "$TMP_FILE"

DATA_ROOT='/usr/share'

log_debug 'Install Telegram desktop XDG integration...'
SRC_XDG="$TMP_SOURCE_DIR/lib/xdg"
install -D "$SRC_XDG/org.telegram.desktop.desktop" \
    "$DATA_ROOT/applications"

DBUS_SERVICES_DIR="$DATA_ROOT/dbus-1/services"
mkdir --parents "$DBUS_SERVICES_DIR"
sed "s|@CMAKE_INSTALL_FULL_BINDIR@|$INSTALL_DIR|g" \
    "$SRC_XDG/org.telegram.desktop.service" \
    > "$DBUS_SERVICES_DIR/org.telegram.desktop.service"

install -D "$SRC_XDG/org.telegram.desktop.metainfo.xml" \
    "$DATA_ROOT/metainfo"

# TODO: XDG portals

log_debug 'Install Telegram desktop icons...'
SRC_RESOURCES="$TMP_SOURCE_DIR/Telegram/Resources"
ICONS_DIR="$DATA_ROOT/icons/hicolor"

find "$SRC_RESOURCES/art/" -type f -regextype 'posix-extended' \
        -regex '.*icon[0-9]{2,3}.png' \
    | while read -r ICON; do
        echo "$ICON" \
            | grep --only-matching --perl-regex '\d{2,3}' \
            | xargs -I '{}' install -D "$ICON" \
                "$ICONS_DIR/{}x{}/apps/org.telegram.desktop.png"
    done

find "$SRC_RESOURCES/icons" -type f -name 'tray_monochrome*.svg' \
    | while read -r TRAY_ICON; do
        ICON_MODIFIER="$(basename "$TRAY_ICON" '.svg' \
            | cut --delimiter '_' -f 3 \
            | xargs --no-run-if-empty printf '-%s')"
        DST_NAME="org.telegram.desktop$ICON_MODIFIER-symbolic.svg"
        install -D "$TRAY_ICON" "$ICONS_DIR/symbolic/apps/$DST_NAME"
    done
