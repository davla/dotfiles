#!/usr/bin/env sh

# This script installs, updates and queries the status of software via GitHub
# releases. Read the help text below for more information.
#
# {{@@ header() @@}}

set -e

########################################
# Help
########################################

HELP_TEXT="
Install, update and query status of software installed via GitHub releases.

Usage:
    gh-release update [--force|-F] [--i3blocks-signal|-S SIGNAL] [REPO...]
    gh-release status [REPO...]
    gh-release upgradable [REPO...]

Arguments:
    REPO: A GitHub repository to operate on. It must be present in the GitHub
          releases configuration. It can be just the name of the repository, or
          also include the owner. For example, 'rust' or 'rust-lang/rust'.

Options:
    --force, -F                     Force installation even if the newest
                                    version is already installed.
    --i3blocks-signal, -S SIGNAL    The signal to send to i3blocks, usually to
                                    refresh a blocklet.
    --help, -H                      Show this help text.

Other options are used for logging. For detailed info, check the source code at
{{@@ logger_path @@}}.
Here a quick summary:
    --<log-level>, --log-level <log-level>      Sets the session log level.
    --color <on|off|auto>       Sets whether the output is colored.
    --journald <on|off>         Whether to print journald prefixes.
    --tag <on|off>              Whether to print the log level tag.

Below, more information about the individual commands:

update
    Installs the newest available version of one or more packages via GitHub
    releases. If no repositories are given as arguments, it operates on all
    configured repositories.

    Aliases: install

status
    Display the status of one or more packages installed via GitHub releases,
    including the newest version if not currently installed. If no repositories
    are given as arguments, it operates on all configured repositories.

    Aliases: list

upgradeable
    Display the status of one or more packages installed via GitHub releases
    *that have a newer version available on GitHub*. If no repositories are
    given as arguments, it operates on all configured repositories.

    Aliases: list-upgradable, list-upgradeable, upgradable
"

#######################################
# Libraries includes
#######################################

. "{{@@ gh_release_path @@}}"

########################################
# Variables
########################################

# Configuration variables
. "{{@@ github_releases_conf @@}}"

# Logging defaults
logging_set_level 'info'
logging_set_tag 'on'
logging_set_journald 'off'

########################################
# Functions
########################################

# This function exits with 0 if the first argument is a later version number
# than the second argument, or with 1 otherwise
#
# Arguments:
#   - $1: the first version number
#   - $2: the second version number
is_version_later() {
    [ "$1" != "$2" ] \
        && [ "$(printf '%s\n%s\n' "$1" "$2" | sort --reverse --version-sort \
                | head --lines 1)" = "$1" ]
}

# This function outputs the text for an upgradable GitHub release
#
# Arguments:
#   - $1: The GitHub repository name
#   - $2: The installed version
#   - $3: The latest version
print_upgradeable() {
    printf '%s\t%s -> %s\n' "$@"
}

########################################
# Input processing
########################################

CMD=''
FORCE_INSTALL='false'

case "$1" in
    '--help'|'-H')
        echo "$HELP_TEXT"
        exit 0
        ;;

    'install'|'update')
        [ "$(id --user)" -ne 0 ] && {
            log_error "The '$1' command needs to be run as root"
            exit 64
        }
        CMD='update'
        ;;

    'list-upgradable'|'list-upgradeable'|'upgradable'|'upgradeable')
        CMD='upgradeable'
        ;;

    'status'|'list')
        CMD='status'
        ;;

    *)
        if [ -z "$1" ]; then
            log_error 'No command given'
        else
            log_error "Unknown command: '$1'"
        fi
        exit 65
        ;;
esac
shift

REPOS=""
while [ $# -gt 0 ]; do
    set +e
    logging_parse_arg "$1" "$2"
    LOGGING_PARSE_ARG_EXIT_CODE="$?"
    set -e
    case "$LOGGING_PARSE_ARG_EXIT_CODE" in
        0)
            case "$1" in
                '--force'|'-F')
                    FORCE_INSTALL='true'
                    ;;

                '--i3blocks-signal'|'-S')
                    I3BLOCKS_SIGNAL="$1"
                    shift 1
                    ;;

                *)
                    REPOS="$REPOS $1"
                    ;;
            esac
            shift
            ;;

        255)
            exit 255
            ;;

        *)
            shift "$LOGGING_PARSE_ARG_EXIT_CODE"
            ;;
    esac
done

[ "$CMD" != 'update' ] && [ "$FORCE_INSTALL" = 'true' ] && {
    log_error "The --force flag can only be used with the update command: \
'$CMD' given"
    exit 66
}

########################################
# Main
########################################

# This is the most reliable way to determine which JSON fields are supported by
# the current version of the GitHub CLI
RELEASE_LIST_JSON_FIELDS="$(gh release list --json 2>&1 | tail --lines +2 \
    | xargs --max-lines=1 | paste --delimiters ',' --serial)"
log_debug "Use GitHub release metadata fields: $RELEASE_LIST_JSON_FIELDS"

REPO_PATHS="$(echo "${REPOS## }" | tr ' ' '|' | xargs printf '.*(%s).*')"
find "$RELEASES_DIR" -maxdepth 2 -mindepth 2 -type d \
        -regextype 'posix-extended' -regex "$REPO_PATHS" -printf '%P\n' \
    | while read -r GITHUB_REPO; do
        log_info "Process $GITHUB_REPO..."

        REPO_PATH="$RELEASES_DIR/$GITHUB_REPO"

        INSTALLED_VERSION_FILE="$REPO_PATH/installed-version"
        if [ -f "$INSTALLED_VERSION_FILE" ]; then
            log_debug "Read installed version from $INSTALLED_VERSION_FILE"
            INSTALLED_VERSION="$(cat "$INSTALLED_VERSION_FILE")"
        else
            log_debug 'Set installed version to default value'
            INSTALLED_VERSION='-'
        fi

        LATEST_VERSION_JQ_FILTER='first | .tagName'
        LATEST_VERSION_JQ_FILTER_FILE="$REPO_PATH/latest-release-jq-filter"
        if [ -f "$LATEST_VERSION_JQ_FILTER_FILE" ]; then
            printf 'Use jq filter in %s to retrieve latest release version\n' \
                "$LATEST_VERSION_JQ_FILTER_FILE" | log_debug
            LATEST_VERSION_JQ_FILTER="$(cat "$LATEST_VERSION_JQ_FILTER_FILE") \
                | $LATEST_VERSION_JQ_FILTER"
        fi

        LATEST_VERSION="$(gh --repo "$GITHUB_REPO" release list --order desc \
            --exclude-drafts --exclude-pre-releases --limit 30 \
            --json "$RELEASE_LIST_JSON_FIELDS" \
            --jq "$LATEST_VERSION_JQ_FILTER")"

        log_debug 'Determine whether to execute...'
        if [ "$FORCE_INSTALL" = 'true' ] || [ "$CMD" = 'status' ] \
            || [ ! -f "$INSTALLED_VERSION_FILE" ] \
            || is_version_later "$LATEST_VERSION" "$INSTALLED_VERSION"
        then
            SHOULD_EXECUTE='true'
        else
            SHOULD_EXECUTE='false'
        fi
        log_debug "Executing? $SHOULD_EXECUTE"

        [ "$SHOULD_EXECUTE" = 'false' ] && {
            log_debug "Not executing for $GITHUB_REPO"
            continue
        }

        case "$CMD" in
            'status')
                if [ "$INSTALLED_VERSION" = "$LATEST_VERSION" ]; then
                    printf '%s\tup to date\n' "$GITHUB_REPO"
                else
                    print_upgradeable "$GITHUB_REPO" "$INSTALLED_VERSION" \
                        "$LATEST_VERSION"
                fi
                ;;

            'update')
                log_info "Install $GITHUB_REPO version $LATEST_VERSION"
                logging_export_config
                "$REPO_PATH/install" "$GITHUB_REPO" "$LATEST_VERSION" \
                    || continue
                echo "$LATEST_VERSION" > "$INSTALLED_VERSION_FILE"
                ;;

            'upgradeable')
                print_upgradeable "$GITHUB_REPO" "$INSTALLED_VERSION" \
                    "$LATEST_VERSION"
                ;;
        esac
    done

if [ "$CMD" = 'update' ] && [ -n "$I3BLOCKS_SIGNAL" ]; then
    log_debug "Send signal to i3blocks: $I3BLOCKS_SIGNAL"
    pkill --signal "RTMIN+$I3BLOCKS_SIGNAL" i3blocks
fi
